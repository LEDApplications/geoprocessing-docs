// tag::geo00env[]
== Set environment variables

This file defines a standard set of environment variables used by the geography processing modules. In order to keep distinct vintages separate there exists a schema prefix which will be appended to the beginning of the postgresql schema. For example, if 'otm2018' is set as the schema prefix, data will be stored in 'otm2018public', 'otm2018final', 'otm2018names' and so on. Set the new schema prefix and environment variables prior to running any new vintage as it will drop/overwrite existing schemas and tables. 

[source,bash]
----
vi 00_setenvvars.bash
----
// end::geo00env[]

// tag::geo01[]
== Load faces

_runtime: 3 hours_

This program loads the faces or facesah shape and dbf files into the prefixed public postgres schema. All files in the provided directory that match the form of faces.shp or facesah.dbf will be loaded.

[source,bash]
----
time ./01_facesloader.bash /path/to/files faces
----
// end::geo01[]

// tag::geo02[]
== Format faces for crosswalking

_runtime: 3.5 hours_

This program takes the raw faces data in the prefixed public schema and formats the fields into crosswalkable identifiers. Fields are given 9 flags and state fips codes if necessary.

[source,bash]
----
time ./02_xwalk.bash faces
----
// end::geo02[]

// tag::geo04[]
== Load shp-> db

This program loads TIGER shapefiles into the public schema. Providing a path (/path otm) and type will load all application files expected for that type. Providing a path and single layer will load a single layer.

_runtime: 20 minutes_

[source,bash]
----
time ./04_shapeloader.bash otm_tiger_current otm
----
// end::geo04[]

// tag::geo05[]
== Load WIB Defs

load the wib csv definitions into the database

[source,bash]
----
time ./05_wibcsvloader.bash wib_csvs/
----
// end::geo05[]

// tag::geo06[]
== Create public WIBs

Create WIB polygons

[source,bash]
----
time ./06_wibshape.bash wib
----
// end::geo06[]

// tag::geo07[]
== Validate Schemas

Validate that the loaded shapefiles match the table schemas from previous

[source,bash]
----
./07_checkschemas_qa.bash all
----
// end::geo07[]

// tag::geo08[]
== Project Geography

project into albers

[source,bash]
----
./08_project.bash otm
----
// end::geo08[]

// tag::geo09[]
== Remove undefined

remove undefined areas from projected shapefiles

[source,bash]
----
time ./09_removeundefined.bash all
----
// end::geo09[]

// tag::geo10[]
== Remove unpopulated

remove unpopulated areas from projected shapefiles

[source,bash]
----
time ./10_removeunpopulated.bash otm
----
// end::geo10[]

// tag::geo11[]
== Create Schools

create single schools table

[source,bash]
----
./11_createschools.bash schools
----
// end::geo11[]

// tag::geo12[]
== Format military names

format the military names

[source,bash]
----
./12_formatnames.bash mil
----
// end::geo12[]

// tag::geo13[]
== Crosswalk

create the crosswalk 

[source,bash]
----
time ./13_intptxwalk.bash xwalk
----
// end::geo13[]

// tag::geo14[]

== CD Block Splits

IMPORTANT: The crosswalk assigns higher level geographies based on the centermost face.
Congressional districts get special handling because of their political import. 
Geo produces a pdf file that specifies a handful of assignments that we use wholesale.

WARNING: DO NOT USE THE FULL CSV FILE OF BLOCK ASSIGNMENTS

Verify that this is the correct congress session, then download the 
https://www2.census.gov/programs-surveys/decennial/rdo/mapping-files/2019/116-congressional-district-bef/CD116_BlockSplits.pdf[CD116 Block Splits] pdf file and convert to a csv of the form:

[%header,format=csv]
|===
State Name, State Code, County Name, County Code, Tract Code, Block, CD's within Block, Data Tabulated to CD
Kentucky,21,Harrison,097,950100,1068,"4,6",4
Kentucky,21,Harrison,097,950100,1070,"4,6",4
Kentucky,21,Harrison,097,950400,2024,"4,6",6
Kentucky,21,Harrison,097,950400,2032,"4,6",6
Kentucky,21,Jefferson,111,010316,1013,"3,4",4
|===

Use the following commands to load and patch the crosswalk with the updated congressional districts.

[source,bash]
----
time ./14_assigncdxwalk.bash path/to/CD.csv
----
// end::geo14[]

// tag::geo16[]
== Assign exoids to layers

Take the exoids from the crosswalk and update the references in each layer table

[source,bash]
----
time ./16_assignexoid.bash all
----
// end::geo16[]

// tag::geo17[]
== Generate water mask

Generate the coastal mask from the difference between the CBF and TIGER. 

IMPORTANT: The CBF layer is hardcoded as it's not released on the same schedule as tiger.
Verify the most recent CBF release and update the year reference in the program below if necessary.

[source,bash]
----
time ./17_generatecbfwatermask.bash qwi 
----
// end::geo17[]

// tag::geo19[]
== Export the Crosswalk CSV

Create a directory to store the final crosswalk csv and export all relevant columns.
There are a few different versions of the crosswalk available. Choose as needed.

[source,bash]
----
time ./19_exportxwalks.bash /some/folder blk_xwalk_wide
----
// end::geo19[]

// tag::geo20[]
== Create high, noncostal water reference

This program creates the high level, low resolution water features for OnTheMap. This is a new layer that will be a mix of water and polygon features

[source,bash]
----
time ./20_highlevelwater.bash highlevel
----
// end::geo20[]
