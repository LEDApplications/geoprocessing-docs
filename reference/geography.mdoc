// tag::geo00env[]
== Set environment variables

This file defines a standard set of environment variables used by the geography processing modules. In order to keep distinct vintages separate there exists a schema prefix which will be appended to the beginning of the postgresql schema. For example, if 'otm2018' is set as the schema prefix, data will be stored in 'otm2018public', 'otm2018final', 'otm2018names' and so on. Set the new schema prefix and environment variables prior to running any new vintage as it will drop/overwrite existing schemas and tables. 

[source,bash]
----
vi 00_setenvvars.bash
----
// end::geo00env[]

// tag::geo01[]
== Load faces

_runtime: 3 hours_

This program loads the faces or facesah shape and dbf files into the prefixed public postgres schema. All files in the provided directory that match the form of faces.shp or facesah.dbf will be loaded.

[source,bash]
----
time ./01_facesloader.bash /path/to/files faces
----
// end::geo01[]

// tag::geo02[]
== Format faces for crosswalking

_runtime: 3.5 hours_

This program takes the raw faces data in the prefixed public schema and formats the fields into crosswalkable identifiers. Fields are given 9 flags and state fips codes if necessary.

[source,bash]
----
time ./02_xwalk.bash faces
----
// end::geo02[]

// tag::geo04[]
== Load shp-> db

_runtime: 30 minutes_

This program loads TIGER shapefiles into the public schema. Providing a path (/path otm) and type will load all application files expected for that type. Providing a path and single layer will load a single layer.

[source,bash]
----
time ./04_shapeloader.bash otm_tiger_current otm
----
// end::geo04[]

// tag::geo05[]
== Load WIB Defs

_runtime: 10 seconds_

This program loads the wib csv definitions into the working.wib_definitions table. Current wib gzip prod files can be found in /data/production/prod/current/exwib/us/

[source,bash]
----
time ./05_wibcsvloader.bash wib_csvs/
----
// end::geo05[]

// tag::geo06[]
== Create public WIBs

_runtime: 1 minute_

This program creates a wib table of the component parts from county, county sub, and place tables in the prefixed public schema. A scratch table called working.wib_geometry is also used.

[source,bash]
----
time ./06_wibshape.bash wib
----
// end::geo06[]

// tag::geo07[]
== Validate Schemas

This program validates the table schemas in postgres vs the csv schemas in the ./schemas directory. The postgis tables checked are in the otmgeo database. The schemas verified are of raw tables only - those loaded in the public schema. Check that the output lists the expected tables as "validated". Any errors that occur here will require manual adjustment of downstream processes.

[source,bash]
----
./07_checkschemas_qa.bash all
----
// end::geo07[]

// tag::geo08[]
== Project Geography

_runtime: process dependent_

This program projects tables in the public schema into new tables in the working schema. All non-geomtry data is copied over unchanged. A set of predefined tables and projections are associated with the 'otm' and 'qwi' keywords but single layers can be projected as needed. See the program help instructions for more info.

[source,bash]
----
./08_project.bash [otm|qwi]
----
// end::geo08[]

// tag::geo09[]
== Remove undefined

_runtime: 10 seconds_

This program removes undefined congressional districts, state legislative districts (upper and lower), and county subdivisions

[source,bash]
----
time ./09_removeundefined.bash all
----
// end::geo09[]

// tag::geo10[]
== Remove unpopulated

_runtime: 6 minutes_

This program removes unpopulated and unused areas from the geography tables, either all tables or individual. Guam, American Samoa, and the volcanic Hawiian chain are removed. A working.invalid table is created that contains all of the geographies to be deleted. This table persists so it can be used to delete elements from the tables that created it.

The block definitions for the AK islands is now required.
Located at: ./input_data/ak_island_blocks.csv

[source,bash]
----
time ./10_removeunpopulated.bash otm
----
// end::geo10[]

// tag::geo11[]
== Create Schools

_runtime: 20 seconds_

This program creates the schools layer from the unsd and elsd tables in the prefixed working schema

[source,bash]
----
./11_createschools.bash schools
----
// end::geo11[]

// tag::geo12[]
== Format names

_runtime: 1 second_

This program adjusts names on individual layers. The current iteration only makes adjustments to the mil layer. 

[source,bash]
----
./12_formatnames.bash mil
----
// end::geo12[]

// tag::geo13[]
== Crosswalk

_runtime: hours_

This program creates the takes the faces data and chooses the centermost face on a block to use for an internal point. The result data, block_xwalk_intpt in the prefixed working schema, represents the block level data. All non-centermost faces have been deleted in this file.

[source,bash]
----
time ./13_intptxwalk.bash xwalk
----
// end::geo13[]

// tag::geo14[]

== CD Block Splits

IMPORTANT: The crosswalk assigns higher level geographies based on the centermost face.
Congressional districts get special handling because of their political import. 
Geo produces a pdf file that specifies a handful of assignments that we use wholesale.

WARNING: DO NOT USE THE FULL CSV FILE OF BLOCK ASSIGNMENTS

Verify that this is the correct congress session, then download the 
https://www2.census.gov/programs-surveys/decennial/rdo/mapping-files/2019/116-congressional-district-bef/CD116_BlockSplits.pdf[CD116 Block Splits] pdf file and convert to a csv of the form:

[%header,format=csv]
|===
State Name, State Code, County Name, County Code, Tract Code, Block, CD's within Block, Data Tabulated to CD
Kentucky,21,Harrison,097,950100,1068,"4,6",4
Kentucky,21,Harrison,097,950100,1070,"4,6",4
Kentucky,21,Harrison,097,950400,2024,"4,6",6
Kentucky,21,Harrison,097,950400,2032,"4,6",6
Kentucky,21,Jefferson,111,010316,1013,"3,4",4
|===

Use the following commands to load and patch the crosswalk with the updated congressional districts.

[source,bash]
----
time ./14_assigncdxwalk.bash path/to/CD.csv
----
// end::geo14[]

// tag::geo16[]
== Assign exoids to layers

Take the exoids from the crosswalk and update the references in each layer table

[source,bash]
----
time ./16_assignexoid.bash all
----
// end::geo16[]

// tag::geo17[]
== Generate water mask

Generate the coastal mask from the difference between the CBF and TIGER. 

IMPORTANT: The CBF layer is hardcoded as it's not released on the same schedule as tiger.
Verify the most recent CBF release and update the year reference in the program below if necessary.

[source,bash]
----
time ./17_generatecbfwatermask.bash qwi 
----
// end::geo17[]

// tag::geo19[]
== Export the Crosswalk CSV

Create a directory to store the final crosswalk csv and export all relevant columns.
There are a few different versions of the crosswalk available. Choose as needed.

[source,bash]
----
time ./19_exportxwalks.bash /some/folder blk_xwalk_wide
----
// end::geo19[]

// tag::geo20[]
== Create high, noncostal water reference

This program creates the high level, low resolution water features for OnTheMap. This is a new layer that will be a mix of water and polygon features

[source,bash]
----
time ./20_highlevelwater.bash highlevel
----
// end::geo20[]
